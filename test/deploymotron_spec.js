// Generated by CoffeeScript 1.4.0
(function() {
  var assert, deploymotron, featureName, robot, robotDo;

  assert = require("assert");

  deploymotron = require("../deploymotron.js");

  assert['hubot'] = function(a, b) {
    var isValid;
    isValid = function(a, b) {
      var i, _i, _ref;
      if (a === b) {
        return true;
      }
      if (a === null || b === null) {
        return false;
      }
      if (a.length !== b.length) {
        return false;
      }
      for (i = _i = 0, _ref = a.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (a[i] !== b[i]) {
          return false;
        }
      }
      return true;
    };
    if (!isValid(a, b)) {
      return assert.fail(a, b, void 0, '==');
    }
  };

  robot = function(chat) {
    var responses;
    responses = [];
    return {
      hear: function(regex, robotCallback) {
        var match, msg;
        match = chat.match(regex);
        msg = {
          send: function(response) {
            return response;
          },
          match: match
        };
        if (match) {
          responses.push(robotCallback(msg));
        }
        return responses;
      }
    };
  };

  featureName = "feature-branch";

  robotDo = function(command) {
    return deploymotron(robot(command));
  };

  describe('Deploymotron', function() {
    beforeEach(function() {
      return deploymotron('wipe');
    });
    describe('asking for the pipe contents', function() {
      var chat;
      chat = function(name) {
        name || (name = featureName);
        return "deploymotron, << " + name;
      };
      return it('resonds with two', function() {
        var expect, sizeReq;
        sizeReq = "deploymotron, ls";
        expect = "" + featureName + ",another-feature";
        robotDo(chat());
        robotDo(chat('another-feature'));
        return assert.hubot(robotDo(sizeReq), [expect]);
      });
    });
    return describe('adding a feature to the pipe', function() {
      var chat;
      chat = "deploymotron, << " + featureName;
      it('responds with the pipe length', function() {
        var expect;
        expect = "You're number: 1 in the pipeline";
        return assert.hubot(robotDo(chat), [expect]);
      });
      return it('increases the pipe length', function() {
        var dumpReq, expect;
        dumpReq = "deploymotron, dump";
        expect = JSON.stringify([
          {
            branch: featureName
          }
        ]);
        deploymotron(robot(chat));
        return assert.hubot(robotDo(dumpReq), [expect]);
      });
    });
  });

}).call(this);
