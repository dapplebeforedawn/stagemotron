// Generated by CoffeeScript 1.4.0
(function() {
  var assert, assertChat, deploymotron, featureName, robot;

  assert = require("assert");

  deploymotron = require("../deploymotron.js");

  robot = require("./support/hubot_mock.js");

  featureName = "feature-branch";

  assertChat = function(expect, done) {
    return function(chatPost) {
      assert.equal(expect, chatPost);
      return done();
    };
  };

  describe('Deploymotron', function() {
    beforeEach(function() {
      return deploymotron('wipe');
    });
    describe('asking for the pipe contents', function() {
      var chat;
      chat = function(name) {
        name || (name = featureName);
        return "deploymotron, << " + name;
      };
      return it('resonds with two', function(done) {
        var expect, r, sizeReq;
        sizeReq = "deploymotron, ls";
        expect = "" + featureName + ",another-feature";
        r = robot();
        deploymotron(r.setInput(chat()));
        deploymotron(r.setInput(chat('another-feature')));
        return deploymotron(r.setInput(sizeReq).setChatRoom(assertChat(expect, done)));
      });
    });
    describe('adding a feature to the pipe', function() {
      var chat;
      chat = "deploymotron, << " + featureName;
      it('lets the first feature start', function(done) {
        var expect, r;
        expect = "The staging environment is ready for feature-branch";
        r = robot().setInput(chat).setChatRoom(assertChat(expect, done));
        return deploymotron(r);
      });
      it('tells the second feature to wait', function(done) {
        var expect, firstFeature, r, secondFeature;
        expect = "You're number: 2 in the pipeline";
        firstFeature = "deploymotron, << a-feature";
        secondFeature = "deploymotron, << another-feature";
        r = robot();
        deploymotron(r.setInput(firstFeature));
        return deploymotron(r.setInput(secondFeature).setChatRoom(assertChat(expect, done)));
      });
      return it('increases the pipe length', function(done) {
        var dumpReq, expect, r;
        dumpReq = "deploymotron, dump";
        expect = JSON.stringify({
          pipeline: [
            {
              branch: featureName,
              lsotd: false
            }
          ],
          history: []
        });
        r = robot();
        deploymotron(r.setInput(chat));
        return deploymotron(r.setInput(dumpReq).setChatRoom(assertChat(expect, done)));
      });
    });
    return describe('a user merges master', function() {
      return it('notifies the next feature that they can stage', function(done) {
        var expect, featureSHA, firstFeature, nextFeature, r;
        expect = "The staging environment is ready for next-feature-branch";
        featureSHA = "415364bea630d56e0fc6d6b5449e8faac613992c";
        firstFeature = "deploymotron, << feature-branch";
        nextFeature = "deploymotron, << next-feature-branch";
        r = robot();
        deploymotron(r.setInput(firstFeature));
        deploymotron(r.setInput(nextFeature));
        return deploymotron(r.setInput('/deploymotron').setPayload(JSON.stringify({
          sha: featureSHA
        })).setChatRoom(assertChat(expect, done)));
      });
    });
  });

}).call(this);
